{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DF-Anandapr23"
		},
		"TRIGGER_TA2TC_properties_dynamic_sql2sqlCopy_parameters_sourceTableName": {
			"type": "string",
			"defaultValue": "TABLEA"
		},
		"TRIGGER_TA2TC_properties_dynamic_sql2sqlCopy_parameters_destTableName": {
			"type": "string",
			"defaultValue": "TABLEC"
		},
		"TRIGGER_TB2TD_properties_dynamic_sql2sqlCopy_parameters_sourceTableName": {
			"type": "string",
			"defaultValue": "TABLEB"
		},
		"TRIGGER_TB2TD_properties_dynamic_sql2sqlCopy_parameters_destTableName": {
			"type": "string",
			"defaultValue": "TABLED"
		},
		"Tumbling_trigger_properties_pipeline_parameters_startDate": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowStartTime"
		},
		"Tumbling_trigger_properties_pipeline_parameters_endDate": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowEndTime"
		},
		"eventtrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7d19c70e-0197-4309-b973-dd0bccbfe8ea/resourceGroups/RG-AnandApr23/providers/Microsoft.Storage/storageAccounts/stganandapr23"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Filter_multiconditions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Empdataset",
								"type": "DatasetReference"
							},
							"name": "empdataset"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Outputdataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filtermulti"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          SALARY as integer,",
						"          DEPARTMENT_ID as string,",
						"          LOCATION_ID as string,",
						"          HIRE_DATE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empdataset",
						"empdataset filter(SALARY>5000 || SALARY<4000) ~> filtermulti",
						"filtermulti sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Emp_multifilter.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EMPID = EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          SALARY",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Filtergreater5000')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Empdataset",
								"type": "DatasetReference"
							},
							"name": "empdataset"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Outputdataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filtergreater5000"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          SALARY as integer,",
						"          DEPARTMENT_ID as string,",
						"          LOCATION_ID as string,",
						"          HIRE_DATE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empdataset",
						"empdataset filter(SALARY>5000) ~> filtergreater5000",
						"filtergreater5000 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Emp_greater5000.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EMPID = EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          SALARY",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Rank')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Rank_input",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Outputdataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "Outputdataset",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "rank1"
						},
						{
							"name": "rank2"
						},
						{
							"name": "rank3"
						},
						{
							"name": "rank4"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as string,",
						"          Emp_name as string,",
						"          Salary as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 rank(desc(Salary, true),",
						"     output(Rank as long),",
						"     dense: true) ~> rank1",
						"source1 rank(desc(Emp_name, true),",
						"     output(Rank_Casesensitive as long)) ~> rank2",
						"rank1 rank(desc(Emp_name, true),",
						"     caseInsensitive: true,",
						"     output(Rank_caseinsentive as long),",
						"     dense: true) ~> rank3",
						"rank2 rank(desc(Emp_name, true),",
						"     caseInsensitive: true,",
						"     output(Case_insenitive as long)) ~> rank4",
						"rank4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Rank.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"rank3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DenseRank.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Window')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Emp_Saldataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Outputdataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "Outputdataset",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "rank1"
						},
						{
							"name": "window1"
						},
						{
							"name": "window2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as string,",
						"          Name as string,",
						"          Salary as integer,",
						"          department_name as string,",
						"          country_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 rank(desc(Salary, true),",
						"     output(Rank_Table as long)) ~> rank1",
						"rank1 window(over(department_name),",
						"     desc(Salary, true),",
						"     Rank_Partition = rank(),",
						"          dense_rank_Partition = denseRank()) ~> window1",
						"source1 window(asc(Salary, true),",
						"     Running_Total = sum(Salary)) ~> window2",
						"window2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Running_Totalcsv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Window_Rank.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/combinemultiplerows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Skill_input",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Outputdataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as string,",
						"          Emp_name as string,",
						"          Skill as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 aggregate(groupBy(Emp_name),",
						"     Skill_Cumm = collect(Skill)) ~> aggregate1",
						"aggregate1 derive(Skill_Column = regexReplace(toString(Skill_Cumm), \"[^a-zA-Z,]\", \"\")) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['skill.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Emp_name,",
						"          Skill_Column",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_different schema')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_tableA",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_TABLED",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as integer,",
						"          NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(CITY = \"\",",
						"          STATE = \"\") ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          NAME as string,",
						"          CITY as string,",
						"          STATE as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/surrogatekey')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Emp_Saldataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Outputdataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as string,",
						"          Name as string,",
						"          Salary as string,",
						"          department_name as string,",
						"          country_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 keyGenerate(output(Keyvalue as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['surrogatekey.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Execute_dataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "combinemultiplerows",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-12T02:00:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/combinemultiplerows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Self_hosted')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "selfhosted_Dynamic",
								"type": "DatasetReference",
								"parameters": {
									"dbName": "Empdatabase",
									"tableName": "EMP_SAL"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dynamic_sql_dataset",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "EMP_SAL"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-19T03:44:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "sql_different schema",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-12T04:23:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/sql_different schema')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRIGGER_TA2TC')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "dynamic_sql2sqlCopy",
							"type": "PipelineReference"
						},
						"parameters": {
							"sourceTableName": "[parameters('TRIGGER_TA2TC_properties_dynamic_sql2sqlCopy_parameters_sourceTableName')]",
							"destTableName": "[parameters('TRIGGER_TA2TC_properties_dynamic_sql2sqlCopy_parameters_destTableName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2023-04-19T03:48:00Z",
						"endTime": "2023-04-20T03:48:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRIGGER_TB2TD')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "dynamic_sql2sqlCopy",
							"type": "PipelineReference"
						},
						"parameters": {
							"sourceTableName": "[parameters('TRIGGER_TB2TD_properties_dynamic_sql2sqlCopy_parameters_sourceTableName')]",
							"destTableName": "[parameters('TRIGGER_TB2TD_properties_dynamic_sql2sqlCopy_parameters_destTableName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2023-04-19T03:52:00Z",
						"endTime": "2023-04-20T03:52:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tumbling_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "TUMBLINGTRIGGER",
						"type": "PipelineReference"
					},
					"parameters": {
						"startDate": "[parameters('Tumbling_trigger_properties_pipeline_parameters_startDate')]",
						"endDate": "[parameters('Tumbling_trigger_properties_pipeline_parameters_endDate')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 12,
					"startTime": "2023-04-01T03:25:00Z",
					"endTime": "2023-04-21T03:25:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eventtrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "eventtrigger",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/eventtrigger/blobs/Input",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('eventtrigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		}
	]
}